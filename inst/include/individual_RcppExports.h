// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_individual_RCPPEXPORTS_H_GEN_
#define RCPP_individual_RCPPEXPORTS_H_GEN_

#include "individual_types.h"
#include <Rcpp.h>

namespace individual {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("individual", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("individual", "_individual_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in individual");
            }
        }
    }

    inline Rcpp::XPtr<State> create_state(const Rcpp::List individuals) {
        typedef SEXP(*Ptr_create_state)(SEXP);
        static Ptr_create_state p_create_state = NULL;
        if (p_create_state == NULL) {
            validateSignature("Rcpp::XPtr<State>(*create_state)(const Rcpp::List)");
            p_create_state = (Ptr_create_state)R_GetCCallable("individual", "_individual_create_state");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_state(Shield<SEXP>(Rcpp::wrap(individuals)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<State> >(rcpp_result_gen);
    }

    inline void state_apply_updates(Rcpp::XPtr<State> state) {
        typedef SEXP(*Ptr_state_apply_updates)(SEXP);
        static Ptr_state_apply_updates p_state_apply_updates = NULL;
        if (p_state_apply_updates == NULL) {
            validateSignature("void(*state_apply_updates)(Rcpp::XPtr<State>)");
            p_state_apply_updates = (Ptr_state_apply_updates)R_GetCCallable("individual", "_individual_state_apply_updates");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_state_apply_updates(Shield<SEXP>(Rcpp::wrap(state)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::XPtr<ProcessAPI> create_process_api(Rcpp::XPtr<State> state, Rcpp::Environment scheduler, Rcpp::List params) {
        typedef SEXP(*Ptr_create_process_api)(SEXP,SEXP,SEXP);
        static Ptr_create_process_api p_create_process_api = NULL;
        if (p_create_process_api == NULL) {
            validateSignature("Rcpp::XPtr<ProcessAPI>(*create_process_api)(Rcpp::XPtr<State>,Rcpp::Environment,Rcpp::List)");
            p_create_process_api = (Ptr_create_process_api)R_GetCCallable("individual", "_individual_create_process_api");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_create_process_api(Shield<SEXP>(Rcpp::wrap(state)), Shield<SEXP>(Rcpp::wrap(scheduler)), Shield<SEXP>(Rcpp::wrap(params)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<ProcessAPI> >(rcpp_result_gen);
    }

    inline std::vector<size_t> process_get_state(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::vector<std::string> states) {
        typedef SEXP(*Ptr_process_get_state)(SEXP,SEXP,SEXP);
        static Ptr_process_get_state p_process_get_state = NULL;
        if (p_process_get_state == NULL) {
            validateSignature("std::vector<size_t>(*process_get_state)(Rcpp::XPtr<ProcessAPI>,const std::string,const std::vector<std::string>)");
            p_process_get_state = (Ptr_process_get_state)R_GetCCallable("individual", "_individual_process_get_state");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_process_get_state(Shield<SEXP>(Rcpp::wrap(api)), Shield<SEXP>(Rcpp::wrap(individual)), Shield<SEXP>(Rcpp::wrap(states)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<size_t> >(rcpp_result_gen);
    }

    inline std::vector<double> process_get_variable(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string variable) {
        typedef SEXP(*Ptr_process_get_variable)(SEXP,SEXP,SEXP);
        static Ptr_process_get_variable p_process_get_variable = NULL;
        if (p_process_get_variable == NULL) {
            validateSignature("std::vector<double>(*process_get_variable)(Rcpp::XPtr<ProcessAPI>,const std::string,const std::string)");
            p_process_get_variable = (Ptr_process_get_variable)R_GetCCallable("individual", "_individual_process_get_variable");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_process_get_variable(Shield<SEXP>(Rcpp::wrap(api)), Shield<SEXP>(Rcpp::wrap(individual)), Shield<SEXP>(Rcpp::wrap(variable)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline void process_queue_state_update(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string state, const std::vector<size_t> index_vector) {
        typedef SEXP(*Ptr_process_queue_state_update)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_process_queue_state_update p_process_queue_state_update = NULL;
        if (p_process_queue_state_update == NULL) {
            validateSignature("void(*process_queue_state_update)(Rcpp::XPtr<ProcessAPI>,const std::string,const std::string,const std::vector<size_t>)");
            p_process_queue_state_update = (Ptr_process_queue_state_update)R_GetCCallable("individual", "_individual_process_queue_state_update");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_process_queue_state_update(Shield<SEXP>(Rcpp::wrap(api)), Shield<SEXP>(Rcpp::wrap(individual)), Shield<SEXP>(Rcpp::wrap(state)), Shield<SEXP>(Rcpp::wrap(index_vector)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void process_queue_variable_update(Rcpp::XPtr<ProcessAPI> api, const std::string individual, const std::string variable, const std::vector<size_t> index, const std::vector<double> values) {
        typedef SEXP(*Ptr_process_queue_variable_update)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_process_queue_variable_update p_process_queue_variable_update = NULL;
        if (p_process_queue_variable_update == NULL) {
            validateSignature("void(*process_queue_variable_update)(Rcpp::XPtr<ProcessAPI>,const std::string,const std::string,const std::vector<size_t>,const std::vector<double>)");
            p_process_queue_variable_update = (Ptr_process_queue_variable_update)R_GetCCallable("individual", "_individual_process_queue_variable_update");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_process_queue_variable_update(Shield<SEXP>(Rcpp::wrap(api)), Shield<SEXP>(Rcpp::wrap(individual)), Shield<SEXP>(Rcpp::wrap(variable)), Shield<SEXP>(Rcpp::wrap(index)), Shield<SEXP>(Rcpp::wrap(values)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void execute_process(Rcpp::XPtr<process_t> process, Rcpp::XPtr<ProcessAPI> api) {
        typedef SEXP(*Ptr_execute_process)(SEXP,SEXP);
        static Ptr_execute_process p_execute_process = NULL;
        if (p_execute_process == NULL) {
            validateSignature("void(*execute_process)(Rcpp::XPtr<process_t>,Rcpp::XPtr<ProcessAPI>)");
            p_execute_process = (Ptr_execute_process)R_GetCCallable("individual", "_individual_execute_process");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_execute_process(Shield<SEXP>(Rcpp::wrap(process)), Shield<SEXP>(Rcpp::wrap(api)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline void execute_listener(Rcpp::XPtr<listener_t> listener, Rcpp::XPtr<ProcessAPI> api, std::vector<size_t> target) {
        typedef SEXP(*Ptr_execute_listener)(SEXP,SEXP,SEXP);
        static Ptr_execute_listener p_execute_listener = NULL;
        if (p_execute_listener == NULL) {
            validateSignature("void(*execute_listener)(Rcpp::XPtr<listener_t>,Rcpp::XPtr<ProcessAPI>,std::vector<size_t>)");
            p_execute_listener = (Ptr_execute_listener)R_GetCCallable("individual", "_individual_execute_listener");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_execute_listener(Shield<SEXP>(Rcpp::wrap(listener)), Shield<SEXP>(Rcpp::wrap(api)), Shield<SEXP>(Rcpp::wrap(target)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
    }

    inline Rcpp::XPtr<process_t> fixed_probability_state_change_process(const std::string individual, const std::string state_from, const std::string state_to, double rate) {
        typedef SEXP(*Ptr_fixed_probability_state_change_process)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_fixed_probability_state_change_process p_fixed_probability_state_change_process = NULL;
        if (p_fixed_probability_state_change_process == NULL) {
            validateSignature("Rcpp::XPtr<process_t>(*fixed_probability_state_change_process)(const std::string,const std::string,const std::string,double)");
            p_fixed_probability_state_change_process = (Ptr_fixed_probability_state_change_process)R_GetCCallable("individual", "_individual_fixed_probability_state_change_process");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fixed_probability_state_change_process(Shield<SEXP>(Rcpp::wrap(individual)), Shield<SEXP>(Rcpp::wrap(state_from)), Shield<SEXP>(Rcpp::wrap(state_to)), Shield<SEXP>(Rcpp::wrap(rate)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<process_t> >(rcpp_result_gen);
    }

    inline Rcpp::XPtr<listener_t> update_state_listener(const std::string individual, const std::string state) {
        typedef SEXP(*Ptr_update_state_listener)(SEXP,SEXP);
        static Ptr_update_state_listener p_update_state_listener = NULL;
        if (p_update_state_listener == NULL) {
            validateSignature("Rcpp::XPtr<listener_t>(*update_state_listener)(const std::string,const std::string)");
            p_update_state_listener = (Ptr_update_state_listener)R_GetCCallable("individual", "_individual_update_state_listener");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_update_state_listener(Shield<SEXP>(Rcpp::wrap(individual)), Shield<SEXP>(Rcpp::wrap(state)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<listener_t> >(rcpp_result_gen);
    }

    inline Rcpp::XPtr<listener_t> reschedule_listener(const std::string event, double delay) {
        typedef SEXP(*Ptr_reschedule_listener)(SEXP,SEXP);
        static Ptr_reschedule_listener p_reschedule_listener = NULL;
        if (p_reschedule_listener == NULL) {
            validateSignature("Rcpp::XPtr<listener_t>(*reschedule_listener)(const std::string,double)");
            p_reschedule_listener = (Ptr_reschedule_listener)R_GetCCallable("individual", "_individual_reschedule_listener");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_reschedule_listener(Shield<SEXP>(Rcpp::wrap(event)), Shield<SEXP>(Rcpp::wrap(delay)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::XPtr<listener_t> >(rcpp_result_gen);
    }

}

#endif // RCPP_individual_RCPPEXPORTS_H_GEN_
